
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

#define DEFAULT 0
#define SECONDARY 1

/ {

     macros {
        cmd_tab: cmd_tab {
            label = "CMD_TAB";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LEFT_COMMAND>
                , <&macro_tap &kp TAB>
                , <&macro_pause_for_release>
                , <&macro_press &kp LEFT_ALT>
                , <&macro_release &kp LEFT_COMMAND &kp LEFT_ALT>;
        };
        thick_arrow: thick_arrow {
            label = "THICK_ARROW";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp EQUAL>
                , <&macro_tap &kp GT>;
        };
        thin_arrow: thin_arrow {
            label = "THIN_ARROW";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp MINUS &kp GT>;
        };
        parens: parenthesises {
            label = "PARENS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LPAR &kp RPAR &kp LEFT>;
        };
        braces: braces {
            label = "BRACES";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LBRC &kp RBRC &kp LEFT>;
        };
        brakets: brakets {
            label = "BRAKETS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LBKT &kp RBKT &kp LEFT>;
        };
        ltgt: ltgt {
            label = "LTGT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LT &kp GT &kp LEFT>;
        };

    }; 

    combos {
        compatible = "zmk,combos";
        combo_doublequote {
            timeout-ms = <75>;
            key-positions = <31 23>;
            bindings = <&kp DQT>;
        };
        combo_quote {
            timeout-ms = <75>;
            key-positions = <32 23>;
            bindings = <&kp SQT>;
        };
        combo_underscore {
            timeout-ms = <75>;
            key-positions = <31 24>;
            bindings = <&kp UNDERSCORE>;
        };
        combo_minus {
            timeout-ms = <75>;
            key-positions = <32 24>;
            bindings = <&kp MINUS>;
        };
        combo_pipe {
            timeout-ms = <75>;
            key-positions = <31 25>;
            bindings = <&kp PIPE>;
        };
        combo_backslash {
            timeout-ms = <75>;
            key-positions = <32 25>;
            bindings = <&kp BSLH>;
        };
        combo_plus {
            timeout-ms = <75>;
            key-positions = <31 43>;
            bindings = <&kp PLUS>;
        };
        combo_equal {
            timeout-ms = <75>;
            key-positions = <32 43>;
            bindings = <&kp EQUAL>;
        };
        combo_brakets {
            timeout-ms = <75>;
            key-positions = <30 44>;
            bindings = <&brakets>;
        };
        combo_braces {
            timeout-ms = <75>;
            key-positions = <31 44>;
            bindings = <&braces>;
        };
        combo_parenthesises {
            timeout-ms = <75>;
            key-positions = <32 44>;
            bindings = <&parens>;
        };
        combo_tilde {
            timeout-ms = <75>;
            key-positions = <31 45>;
            bindings = <&kp TILDE>;
        };
        combo_grave {
            timeout-ms = <75>;
            key-positions = <32 45>;
            bindings = <&kp GRAVE>;
        };
        combo_percent {
            timeout-ms = <75>;
            key-positions = <30 63>;
            bindings = <&kp PRCNT>;
        };
        combo_hash {
            timeout-ms = <75>;
            key-positions = <31 63>;
            bindings = <&kp HASH>;
        };
        combo_exclamation {
            timeout-ms = <75>;
            key-positions = <32 63>;
            bindings = <&kp EXCL>;
        };
        combo_caret {
            timeout-ms = <75>;
            key-positions = <30 64>;
            bindings = <&kp CARET>;
        };
        combo_amps {
            timeout-ms = <75>;
            key-positions = <31 64>;
            bindings = <&kp AMPS>;
        };
        combo_star {
            timeout-ms = <75>;
            key-positions = <32 64>;
            bindings = <&kp STAR>;
        };
        combo_dollar {
            timeout-ms = <75>;
            key-positions = <31 65>;
            bindings = <&kp DLLR>;
        };
        combo_at {
            timeout-ms = <75>;
            key-positions = <32 65>;
            bindings = <&kp AT>;
        };

    };

    behaviors {
        #include "macros.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick_tap_ms = <145>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
  
        hm_mid: homerow_mods_middle_finger {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_MID";
            #binding-cells = <2>;
            tapping-term-ms = <125>; /* faster */
            quick_tap_ms = <110>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        hlt: hold_preferred_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "HLT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <145>;
            flavor = "hold-preferred";
            bindings = <&mo>, <&kp>;
        };

        ht_ltgt: ht_ltgt {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_LTGT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <145>;
            flavor = "balanced";
            bindings = <&ltgt>, <&kp DOT>;
        };

        td_l_mid: tap_dance_left_middle_finger_home_row {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_L_MID";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&hm_mid LSHFT D>, <&cmd_tab>;
        };
        td_l_mid_2: tap_dance_left_middle_finger_home_row_on_secondary_layer {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_L_MID_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&hm_mid LSHFT N5>, <&cmd_tab>;
        };
        td_l_ind: tap_dance_left_index_finger_home_row {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_L_IND";
            #binding-cells = <0>;
            tapping-term-ms = <200>;

            bindings = <&hm LEFT_COMMAND F>, <&kp ESC>;
        };
        td_l_ind_2: tap_dance_left_index_finger_home_row_on_secondary_layer {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_L_IND_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&hm LEFT_COMMAND N6>, <&kp ESC>;
        };
        td_r_ind: tap_dance_right_index_finger_home_row {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_R_IND";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&hm LEFT_COMMAND J>, <&caps_word>;
        };
        td_r_mid: tap_dance_right_middle_finger_home_row {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_R_MID";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&hm_mid RSHFT K>, <&sk RSHFT>;
        };
        td_r_mid_lower: tap_dance_right_middle_finger_lower_row {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_R_MID_LOWER";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&hm LG(LS(Z)) COMMA>, <&thick_arrow>;
        };
        td_r_ring_lower: tap_dance_right_ring_finger_lower_row {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_R_RING_LOWER";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&ht_ltgt>, <&thin_arrow>;
        };

    };

    keymap {
        compatible = "zmk,keymap";

        layer_default {
            bindings = <
   &hm PLUS EQUAL       &hm EXCL N1       &hm AT N2      &hm HASH N3                &hm DLLR N4             &hm PRCNT N5           &tog DEFAULT                                                                                                                     &mo 3           &hm CARET N6        &hm AMPS N7             &hm STAR N8            &hm LPAR N9       &hm RPAR N0         &hm UNDERSCORE MINUS
   &kp TAB              &hm LS(Q) Q       &hm LS(W) W    &hm LS(E) E                &hm LS(R) R             &hm LS(T) T            &none                                                                                                                            &none           &hm LS(Y) Y         &hm LS(U) U             &hm LS(I) I            &hm LS(O) O       &hm LS(P) P         &hm LS(BSLH) BSLH
   &kp ESC              &hm LCTRL A       &hm LALT S     &td_l_mid                  &td_l_ind               &hm LS(G) G            &none                 &kp LCTRL                      &kp LALT         &none   &none       &kp RIGHT_COMMAND       &kp RCTRL      &none           &hm LS(H) H         &td_r_ind               &td_r_mid              &hm RALT L        &hm RCTRL SEMI      &hm LS(SQT) SQT
   &kp LSHFT            &hm LS(Z) Z       &hm LG(X) X    &hm LG(C) C                &hm LG(V) V             &hm LS(B) B            &none                 &none                          &kp HOME         &none   &none       &kp PG_UP               &none          &none           &hm LS(N) N         &hm LG(Z) M             &td_r_mid_lower        &td_r_ring_lower  &hm LS(FSLH) FSLH   &kp RSHFT
   &mo 2                &kp GRAVE         &kp CAPS       &kp N0                     &kp DEL                                        &hlt SECONDARY BSPC   &hm LSHFT RIGHT_COMMAND        &kp END                              &kp PG_DN               &kp ENTER      &kp SPACE                           &kp TAB                 &kp DOWN               &kp LBKT          &kp RBKT            &mo 2
            >;
        };
        layer_secondary {
            bindings = <
   &kp EQUAL          &kp N1          &kp N2         &kp N3           &kp N4              &kp N5              &tog DEFAULT                                                                                                         &mo 3           &kp N6        &kp N7                  &kp N8          &kp N9         &kp N0            &kp MINUS
   &kp TAB            &kp Q           &kp N7         &kp N8           &kp N9              &kp N0              &none                                                                                                                &none           &kp C_VOL_UP  &kp C_BRI_UP            &kp UP          &kp C_BRI_DN   &kp P             &kp BSLH
   &kp ESC            &hm LCTRL A     &hm LALT N4    &td_l_mid_2      &td_l_ind_2         &kp BSPC            &none                     &kp LCTRL      &kp LALT         &none   &none       &kp LEFT_COMMAND        &kp RCTRL      &none           &kp C_VOL_DN  &kp LEFT                &kp DOWN        &kp RIGHT      &hm RCTRL SEMI    &kp SQT
   &kp LSHFT          &kp Z           &kp N1         &kp N2           &kp N3              &kp BSPC            &none                     &none          &kp HOME         &none   &none       &kp PG_UP               &none          &none           &kp N         &kp M                   &kp COMMA       &kp DOT        &kp FSLH          &kp RSHFT
   &mo 2              &kp GRAVE       &kp CAPS       &kp N0           &kp DEL                                 &kp BSPC                  &hm LSHFT RIGHT_COMMAND         &kp END                              &kp PG_DN               &kp ENTER      &kp N0                        &kp UP                  &kp DOWN        &kp LBKT       &kp RBKT          &mo 2
            >;
        };

        layer_fn {
            bindings = <
 &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6   &tog DEFAULT                                            &mo 3  &kp F7  &kp F8  &kp F9   &kp F10  &kp F11  &kp F12
 &trans  &kp F7  &kp F8  &kp F9  &kp F10  &trans  &none                                                   &none  &trans  &trans  &trans   &trans   &trans   &trans
 &trans  &kp F4  &kp F5  &kp F6  &kp F11  &trans  &none   &trans  &trans   &none   &none  &trans  &trans  &none  &trans  &trans  &trans   &trans   &trans   &trans
 &trans  &kp F1  &kp F2  &kp F3  &kp F12  &trans  &none   &none   &trans   &none   &none  &trans   &none  &none  &trans  &trans  &trans   &trans   &trans   &trans
 &trans  &trans  &trans  &trans  &trans           &trans  &trans  &trans                  &trans  &trans  &trans         &trans  &trans   &trans   &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
  &none         &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4     &none                                                                                                      &trans                      &bt BT_SEL 0     &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4   &none
  &none         &none         &none         &none         &none         &none            &bootloader                                                                                                &bootloader                 &none            &none         &none         &none         &none          &none
  &none         &none         &none         &none         &none         &none            &rgb_ug RGB_MEFS_CMD 5  &bt BT_CLR   &none   &none         &none       &bt BT_CLR      &bt BT_CLR          &rgb_ug RGB_MEFS_CMD 5      &none            &none         &none         &none         &none          &none
  &none         &none         &none         &none         &none         &none            &none                   &none        &none   &none         &none       &none           &none               &none                       &none            &none         &none         &none         &none          &none
  &none         &none         &none         &bl BL_INC    &bl BL_DEC                     &rgb_ug RGB_TOG         &bl BL_TOG   &none                             &none           &bl BL_TOG          &rgb_ug RGB_TOG                              &bl BL_INC    &bl BL_DEC    &none         &none          &none
            >;
        };
    };
};
