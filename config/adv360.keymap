
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

#define DEFAULT 0
#define WHILE_CAPS_LOCK 1
#define FEATURE_BY_L 2
#define FEATURE_BY_R 3
#define NUM 4
#define FN 5
#define MOD 6

&sk {
    release-after-ms = <3000>;
    quick-release;
};

&caps_word {
    continue-list = <BACKSPACE DELETE UNDERSCORE SEMI>;
};

/ {

    macros {
        caps_word_to_wcl: caps_word_to_while_caps_word {
            label = "caps_word_to_while_caps_word";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &caps_word &tog WHILE_CAPS_LOCK>;
        };
        space_tog_wcw: space_toggle_while_caps_word {
            label = "space_toggle_while_caps_word";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp SPACE &tog WHILE_CAPS_LOCK>;
        };
        esc_tog_wcw: esc_toggle_while_caps_word {
            label = "esc_toggle_while_caps_word";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp ESC &tog WHILE_CAPS_LOCK>;
        };
        dqts: doublequotes {
            label = "doublequotes";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp DQT &kp DQT &kp LEFT>;
        };
        sqts: singlequotes {
            label = "singlequotes";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp SQT &kp SQT &kp LEFT>;
        };       
        brakets: brakets {
            label = "brakets";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LBKT &kp RBKT &kp LEFT>;
        };
        braces: braces {
            label = "braces";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LBRC &kp RBRC &kp LEFT>;
        };
        parens: parenthesises {
            label = "parenthesises";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LPAR &kp RPAR &kp LEFT>;
        };
        graves: graves {
            label = "graves";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp GRAVE &kp GRAVE &kp LEFT>;
        };
        cmd_tab: cmd_tab {
            label = "cmd_tab";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LEFT_COMMAND>
                , <&macro_tap &kp TAB>
                , <&macro_pause_for_release>
                , <&macro_press &kp LEFT_ALT>
                , <&macro_release &kp LEFT_COMMAND &kp LEFT_ALT>;
        };
        thick_arrow: thick_arrow {
            label = "thick_arrow";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp EQUAL &kp GT>
        };
        thin_arrow: thin_arrow {
            label = "thin_arrow";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp MINUS &kp GT>;
        };
        sleep: sleep {
            label = "sleep";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LC(LS(LA(LG(F12))))>;
        };
        tripple_left: tripple_left {
            label = "tripple_left";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LEFT &kp LEFT &kp LEFT>;
        };
        tripple_right: tripple_right {
            label = "tripple_right";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp RIGHT &kp RIGHT &kp RIGHT>;
        };
        tripple_up: tripple_up {
            label = "tripple_up";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp UP &kp UP &kp UP>;
        };
        tripple_down: tripple_down {
            label = "tripple_down";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp DOWN &kp DOWN &kp DOWN>;
        };
        auto_suggestion: auto_suggestion {
            label = "auto_suggestion";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp RCTRL &kp SPACE>;
        };
    }; 

    combos {
        
        compatible = "zmk,combos";

        combo_doublequotes {
            timeout-ms = <85>;
            key-positions = <31 23>;
            bindings = <&dqts>;
            layers = <FEATURE_BY_L NUM>;
        };
        combo_singlequotes {
            timeout-ms = <85>;
            key-positions = <32 23>;
            bindings = <&sqts>;
            layers = <FEATURE_BY_L NUM>;
        };
        combo_underscore {
            timeout-ms = <85>;
            key-positions = <31 24>;
            bindings = <&kp UNDERSCORE>;
            layers = <FEATURE_BY_L NUM>;
        };
        combo_minus {
            timeout-ms = <85>;
            key-positions = <32 24>;
            bindings = <&kp MINUS>;
            layers = <FEATURE_BY_L NUM>;
        };
        combo_pipe {
            timeout-ms = <60>;
            key-positions = <31 25>;
            bindings = <&kp PIPE>;
            layers = <FEATURE_BY_L NUM>;
        };
        combo_backslash {
            timeout-ms = <60>;
            key-positions = <32 25>;
            bindings = <&kp BSLH>;
            layers = <FEATURE_BY_L NUM>;
        };
        combo_plus {
            timeout-ms = <75>;
            key-positions = <31 43>;
            bindings = <&kp PLUS>;
            layers = <FEATURE_BY_L NUM>;
        };
        combo_equal {
            timeout-ms = <75>;
            key-positions = <32 43>;
            bindings = <&kp EQUAL>;
            layers = <FEATURE_BY_L NUM>;
        };
        combo_brakets {
            timeout-ms = <50>;
            key-positions = <30 44>;
            bindings = <&brakets>;
            layers = <FEATURE_BY_L NUM>;
        };
        combo_braces {
            timeout-ms = <60>;
            key-positions = <31 44>;
            bindings = <&braces>;
            layers = <FEATURE_BY_L NUM>;
        };
        combo_parenthesises {
            timeout-ms = <60>;
            key-positions = <32 44>;
            bindings = <&parens>;
            layers = <FEATURE_BY_L NUM>;
        };
        combo_tilde {
            timeout-ms = <60>;
            key-positions = <31 45>;
            bindings = <&kp TILDE>;
            layers = <FEATURE_BY_L NUM>;
        };
        combo_graves {
            timeout-ms = <60>;
            key-positions = <32 45>;
            bindings = <&graves>;
            layers = <FEATURE_BY_L NUM>;
        };
        combo_percent {
            timeout-ms = <75>;
            key-positions = <30 63>;
            bindings = <&kp PRCNT>;
            layers = <FEATURE_BY_L NUM>;
        };
        combo_hash {
            timeout-ms = <75>;
            key-positions = <31 63>;
            bindings = <&kp HASH>;
            layers = <FEATURE_BY_L NUM>;
        };
        combo_exclamation {
            timeout-ms = <75>;
            key-positions = <32 63>;
            bindings = <&kp EXCL>;
            layers = <FEATURE_BY_L NUM>;
        };
        combo_caret {
            timeout-ms = <75>;
            key-positions = <30 64>;
            bindings = <&kp CARET>;
            layers = <FEATURE_BY_L NUM>;
        };
        combo_amps {
            timeout-ms = <75>;
            key-positions = <31 64>;
            bindings = <&kp AMPS>;
            layers = <FEATURE_BY_L NUM>;
        };
        combo_star {
            timeout-ms = <75>;
            key-positions = <32 64>;
            bindings = <&kp STAR>;
            layers = <FEATURE_BY_L NUM>;
        };
        combo_dollar {
            timeout-ms = <75>;
            key-positions = <31 65>;
            bindings = <&kp DLLR>;
            layers = <FEATURE_BY_L NUM>;
        };
        combo_at {
            timeout-ms = <75>;
            key-positions = <32 65>;
            bindings = <&kp AT>;
            layers = <FEATURE_BY_L NUM>;
        };

        combo_doublequotes_by_r {
            timeout-ms = <105>;
            key-positions = <31 23>;
            bindings = <&dqts>;
            layers = <FEATURE_BY_R>;
        };
        combo_singlequotes_by_r {
            timeout-ms = <105>;
            key-positions = <32 23>;
            bindings = <&sqts>;
            layers = <FEATURE_BY_R>;
        };
        combo_underscore_by_r {
            timeout-ms = <105>;
            key-positions = <31 24>;
            bindings = <&kp UNDERSCORE>;
            layers = <FEATURE_BY_R>;
        };
        combo_minus_by_r {
            timeout-ms = <105>;
            key-positions = <32 24>;
            bindings = <&kp MINUS>;
            layers = <FEATURE_BY_R>;
        };
        combo_pipe_by_r {
            timeout-ms = <105>;
            key-positions = <31 25>;
            bindings = <&kp PIPE>;
            layers = <FEATURE_BY_R>;
        };
        combo_backslash_by_r {
            timeout-ms = <105>;
            key-positions = <32 25>;
            bindings = <&kp BSLH>;
            layers = <FEATURE_BY_R>;
        };
        combo_plus_by_r {
            timeout-ms = <75>;
            key-positions = <31 43>;
            bindings = <&kp PLUS>;
            layers = <FEATURE_BY_R>;
        };
        combo_equal_by_r {
            timeout-ms = <75>;
            key-positions = <32 43>;
            bindings = <&kp EQUAL>;
            layers = <FEATURE_BY_R>;
        };
        combo_brakets_by_r {
            timeout-ms = <75>;
            key-positions = <30 44>;
            bindings = <&brakets>;
            layers = <FEATURE_BY_R>;
        };
        combo_braces_by_r {
            timeout-ms = <75>;
            key-positions = <31 44>;
            bindings = <&braces>;
            layers = <FEATURE_BY_R>;
        };
        combo_parenthesises_by_r {
            timeout-ms = <75>;
            key-positions = <32 44>;
            bindings = <&parens>;
            layers = <FEATURE_BY_R>;
        };
        combo_tilde_by_r {
            timeout-ms = <105>;
            key-positions = <31 45>;
            bindings = <&kp TILDE>;
            layers = <FEATURE_BY_R>;
        };
        combo_graves_by_r {
            timeout-ms = <105>;
            key-positions = <32 45>;
            bindings = <&graves>;
            layers = <FEATURE_BY_R>;
        };
        combo_percent_by_r {
            timeout-ms = <105>;
            key-positions = <30 63>;
            bindings = <&kp PRCNT>;
            layers = <FEATURE_BY_R>;
        };
        combo_hash_by_r {
            timeout-ms = <105>;
            key-positions = <31 63>;
            bindings = <&kp HASH>;
            layers = <FEATURE_BY_R>;
        };
        combo_exclamation_by_r {
            timeout-ms = <105>;
            key-positions = <32 63>;
            bindings = <&kp EXCL>;
            layers = <FEATURE_BY_R>;
        };
        combo_caret_by_r {
            timeout-ms = <105>;
            key-positions = <30 64>;
            bindings = <&kp CARET>;
            layers = <FEATURE_BY_R>;
        };
        combo_amps_by_r {
            timeout-ms = <105>;
            key-positions = <31 64>;
            bindings = <&kp AMPS>;
            layers = <FEATURE_BY_R>;
        };
        combo_star_by_r {
            timeout-ms = <105>;
            key-positions = <32 64>;
            bindings = <&kp STAR>;
            layers = <FEATURE_BY_R>;
        };
        combo_dollar_by_r {
            timeout-ms = <105>;
            key-positions = <31 65>;
            bindings = <&kp DLLR>;
            layers = <FEATURE_BY_R>;
        };
        combo_at_by_r {
            timeout-ms = <105>;
            key-positions = <32 65>;
            bindings = <&kp AT>;
            layers = <FEATURE_BY_R>;
        };
    };

    behaviors {
        #include "macros.dtsi"

        ht: hold_tap_default {
            compatible = "zmk,behavior-hold-tap";
            label = "hold_tap_default";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick_tap_ms = <175>;
            global-quick-tap;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        ht_num: hold_tap_number {
            compatible = "zmk,behavior-hold-tap";
            label = "hold_tap_number";
            #binding-cells = <2>;
            tapping-term-ms = <100>;
            quick_tap_ms = <100>;
            global-quick-tap;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        ht_num_sub: hold_tap_number_sub {
            compatible = "zmk,behavior-hold-tap";
            label = "hold_tap_number_sub";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <100>;
            global-quick-tap;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        ht_cmd_tab: hold_tap_cmd_tab {
            compatible = "zmk,behavior-hold-tap";
            label = "hold_tap_cmd_tab";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick_tap_ms = <175>;
            global-quick-tap;
            flavor = "tap-preferred";
            bindings = <&cmd_tab>, <&kp>;
        };
        ht_sq: hold_tap_short_quick_tap_ms {
            compatible = "zmk,behavior-hold-tap";
            label = "hold_tap_short_quick_tap_ms";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick_tap_ms = <100>; /* This short value is to prevent hold resolution when typing fast. */
            global-quick-tap;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow_mods";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick_tap_ms = <175>;
            global-quick-tap; 
            retro-tap;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
        hm_mid: homerow_mods_middle_finger {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow_mods_middle_finger";
            #binding-cells = <2>;
            tapping-term-ms = <150>; /* faster */
            quick_tap_ms = <150>;
            global-quick-tap;
            /* no retro-tap; */ /* Sometimes shift is used only with mouse, not other keys. */ 
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
        hm_pinky: homerow_mods_pinky_finger {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow_mods_pinky_finger";
            #binding-cells = <2>;
            tapping-term-ms = <275>; /* slower as pinky has less muscular power */
            quick_tap_ms = <200>;
            global-quick-tap;
            retro-tap;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        hlt: hold_preferred_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "hold_preferred_lt";
            #binding-cells = <2>;
            tapping-term-ms = <160>;
            quick_tap_ms = <160>;
            flavor = "hold-preferred";
            bindings = <&mo>, <&kp>;
        };
        hlt_space_tog_wcw: hlt_space_tog_wcw {
            compatible = "zmk,behavior-hold-tap";
            label = "hlt_space_tog_wcw";
            #binding-cells = <2>;
            tapping-term-ms = <160>;
            quick_tap_ms = <160>;
            flavor = "hold-preferred";
            bindings = <&mo>, <&space_tog_wcw>;            
        };
        ht_sleep: ht_sleep {
            compatible = "zmk,behavior-hold-tap";
            label = "ht_sleep";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&sleep>, <&kp>;            
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_default {
            bindings = <
    &ht PLUS EQUAL       &ht EXCL N1             &ht AT N2       &ht HASH N3                &ht DLLR N4            &ht PRCNT N5            &tog DEFAULT                                                                                                                      &mo MOD                 &ht CARET N6        &ht AMPS N7             &ht STAR N8                    &ht LPAR N9         &ht RPAR N0           &ht UNDERSCORE MINUS
    &kp TAB              &kp Q                   &kp W           &kp E                      &kp R                  &kp T                   &kp LEFT                                                                                                                          &kp UP                  &kp Y               &kp U                   &kp I                          &kp O               &ht_sq RS(P) P        &ht RS(BSLH) BSLH
    &kp ESC              &hm_pinky LCTRL A       &hm LALT S      &hm_mid LSHFT D            &hm LEFT_COMMAND F     &kp G                   &ht N0 RIGHT                 &kp LCTRL                &kp LALT         &none   &none       &kp LEFT_COMMAND        &kp RCTRL      &ht_sleep 0 DOWN        &kp H               &kp J                   &kp K                          &kp L               &kp SEMI              &ht RS(SQT) SQT
    &kp LSHFT            &kp Z                   &kp X           &kp C                      &kp V                  &kp B                   &none                        &none                    &kp HOME         &none   &none       &kp PG_UP               &none          &none                   &kp N               &kp M                   &ht RS(COMMA) COMMA            &ht RS(DOT) DOT     &ht RS(FSLH) FSLH     &kp RSHFT
    &mo FN               &ht LS(GRAVE) GRAVE     &kp ENTER       &kp CAPS                   &kp DEL                                        &hlt FEATURE_BY_L BSPC       &hlt NUM RIGHT_COMMAND   &kp END                              &kp PG_DN               &hlt NUM ENTER &hlt FEATURE_BY_R SPACE                     &kp TAB                 &none                          &ht RS(LBKT) LBKT   &ht RS(RBKT) RBKT     &mo FN
            >;
        };

        layer_while_caps_word {
            bindings = <
    &ht PLUS EQUAL       &ht EXCL N1             &ht AT N2       &ht HASH N3                &ht DLLR N4            &ht PRCNT N5            &tog DEFAULT                                                                                                                      &mo MOD                 &ht CARET N6        &ht AMPS N7             &ht STAR N8                    &ht LPAR N9         &ht RPAR N0           &ht UNDERSCORE MINUS
    &kp TAB              &kp Q                   &kp W           &kp E                      &kp R                  &kp T                   &kp LEFT                                                                                                                          &kp UP                  &kp Y               &kp U                   &kp I                          &kp O               &ht_sq RS(P) P        &ht RS(BSLH) BSLH
    &esc_tog_wcw         &hm_pinky LCTRL A       &hm LALT S      &hm_mid LSHFT D            &hm LEFT_COMMAND F     &kp G                   &ht N1 RIGHT                 &kp LCTRL                &kp LALT         &none   &none       &kp LEFT_COMMAND        &kp RCTRL      &ht_sleep 0 DOWN        &kp H               &kp J                   &kp K                          &kp L               &kp RS(SEMI)          &ht RS(SQT) SQT
    &kp LSHFT            &kp Z                   &kp X           &kp C                      &kp V                  &kp B                   &none                        &none                    &kp HOME         &none   &none       &kp PG_UP               &none          &none                   &kp N               &kp M                   &ht RS(COMMA) COMMA            &ht RS(DOT) DOT     &ht RS(FSLH) FSLH     &kp RSHFT
    &mo FN               &ht LS(GRAVE) GRAVE     &kp ENTER       &kp CAPS                   &kp DEL                                        &hlt FEATURE_BY_L BSPC       &hlt NUM RIGHT_COMMAND   &kp END                              &kp PG_DN               &hlt NUM ENTER &hlt_space_tog_wcw FEATURE_BY_R 0           &kp TAB                 &none                          &ht RS(LBKT) LBKT   &ht RS(RBKT) RBKT     &mo FN
            >;
        };

        layer_feature_by_left { /* Triggered by the left thumb */  
            bindings = <
    &ht PLUS EQUAL       &ht EXCL N1             &ht AT N2       &ht HASH N3                &ht DLLR N4             &ht PRCNT N5           &tog DEFAULT                                                                                                                      &mo MOD                 &ht CARET N6        &ht AMPS N7             &ht STAR N8                    &ht LPAR N9         &ht RPAR N0            &ht UNDERSCORE MINUS
    &kp TAB              &ht LG(Q) LG(W)         &kp LG(LS(Z))   &kp LG(Z)                  &kp LG(GRAVE)           &kp LG(LS(V))          &kp LEFT                                                                                                                          &kp UP                  &auto_suggestion    &tripple_up             &kp UP                         &tripple_down       &ht_sq RS(P) P         &ht RS(BSLH) BSLH
    &kp ESC              &kp LCTRL               &kp LALT        &kp LSHFT                  &kp LEFT_COMMAND        &kp SPACE              &ht N2 RIGHT                 &kp LCTRL                &kp LALT         &none   &none       &kp LEFT_COMMAND        &kp RCTRL      &ht_sleep 0 DOWN        &tripple_left       &kp LEFT                &kp DOWN                       &kp RIGHT           &tripple_right         &ht RS(SQT) SQT
    &kp LSHFT            &kp LG(Z)               &kp LG(X)       &ht_num LG(V) LG(C)        &cmd_tab                &kp BSPC               &none                        &none                    &kp HOME         &none   &none       &kp PG_UP               &none          &none                   &ht RS(N) N         &caps_word_to_wcl       &thick_arrow                   &thin_arrow         &ht RS(FSLH) FSLH      &kp RSHFT
    &mo FN               &ht LS(GRAVE) GRAVE     &kp ENTER       &kp CAPS                   &kp DEL                                        &trans                       &hlt NUM RIGHT_COMMAND   &kp END                              &kp PG_DN               &hlt NUM ENTER &kp SPACE                                   &kp TAB                 &none                          &ht RS(LBKT) LBKT   &ht RS(RBKT) RBKT      &mo FN
            >;
        };

        layer_feature_by_right { /* Triggered by the right thumb */ /* DOT and COMMA are special hold_tap as they may be used for number-related tasks. */
            bindings = <
    &ht PLUS EQUAL       &ht EXCL N1             &ht AT N2       &ht HASH N3                &ht DLLR N4             &ht PRCNT N5           &tog DEFAULT                                                                                                                      &mo MOD                 &ht CARET N6        &ht AMPS N7             &ht STAR N8                    &ht LPAR N9         &ht RPAR N0            &ht UNDERSCORE MINUS
    &kp TAB              &kp Q                   &ht_num KP_N7 W &ht_num KP_N8 E            &ht_num KP_N9 R         &kp T                  &kp LEFT                                                                                                                          &kp UP                  &kp C_VOL_UP        &kp C_BRI_DN            &kp C_BRI_UP                   &ht RS(O) O         &ht_sq RS(P) P         &ht RS(BSLH) BSLH
    &kp ESC              &kp A                   &ht_num KP_N4 S &ht_num KP_N5 D            &ht_num KP_N6 F         &kp G                  &ht N3 RIGHT                 &kp LCTRL                &kp LALT         &none   &none       &kp LEFT_COMMAND        &kp RCTRL      &ht_sleep 0 DOWN        &kp C_VOL_DN        &hm LEFT_COMMAND BSPC   &hm_mid RSHFT ESC              &kp RALT            &kp RCTRL              &ht RS(SQT) SQT
    &kp LSHFT            &kp Z                   &ht_num KP_N1 X &ht_num KP_N2 C            &ht_num KP_N3 V         &kp B                  &none                        &none                    &kp HOME         &none   &none       &kp PG_UP               &none          &none                   &kp LG(S)           &sk RSHFT               &ht_num_sub RS(COMMA) COMMA    &kp DOT             &ht RS(FSLH) FSLH      &kp RSHFT
    &mo FN               &ht LS(GRAVE) GRAVE     &kp ENTER       &ht_num KP_N0 CAPS         &kp DEL                                        &kp BSPC                     &hlt NUM RIGHT_COMMAND   &kp END                              &kp PG_DN               &kp ENTER      &trans                                      &kp TAB                 &none                          &ht RS(LBKT) LBKT   &ht RS(RBKT) RBKT      &mo FN
            >;
        };


        layer_numpad { /* Triggered by the left and right thumbs */ /* DOT and COMMA are special hold_tap as they may be used for number-related tasks. */
            bindings = <
    &ht PLUS EQUAL       &ht EXCL F2             &ht AT F3       &ht HASH F4                &ht DLLR F5             &ht PRCNT F6           &tog DEFAULT                                                                                                                      &mo MOD                 &ht CARET F7        &ht AMPS F8             &ht STAR F9                    &ht LPAR F10        &ht RPAR F11           &ht UNDERSCORE MINUS
    &kp TAB              &kp Q                   &kp KP_N7       &kp KP_N8                  &kp KP_N9               &kp T                  &kp LEFT                                                                                                                          &kp UP                  &kp C_VOL_UP        &kp C_BRI_DN            &kp C_BRI_UP                   &ht RS(O) O         &ht_sq RS(P) P         &ht RS(BSLH) BSLH
    &kp ESC              &kp A                   &kp KP_N4       &kp KP_N5                  &kp KP_N6               &kp G                  &ht N3 RIGHT                 &kp LCTRL                &kp LALT         &none   &none       &kp LEFT_COMMAND        &kp RCTRL      &ht_sleep 0 DOWN        &kp C_VOL_DN        &hm LEFT_COMMAND BSPC   &hm_mid RSHFT ESC              &kp RALT            &kp RCTRL              &ht RS(SQT) SQT
    &kp LSHFT            &kp Z                   &kp KP_N1       &kp KP_N2                  &kp KP_N3               &kp B                  &none                        &none                    &kp HOME         &none   &none       &kp PG_UP               &none          &none                   &kp LG(S)           &sk RSHFT               &ht_num_sub RS(COMMA) COMMA    &kp DOT             &ht RS(FSLH) FSLH      &kp RSHFT
    &mo FN               &ht LS(GRAVE) GRAVE     &kp ENTER       &kp KP_N0                  &kp DEL                                        &hlt FEATURE_BY_L BSPC       &kp RIGHT_COMMAND        &kp END                              &kp PG_DN               &kp ENTER      &hlt FEATURE_BY_R SPACE                     &kp TAB                 &none                          &ht RS(LBKT) LBKT   &ht RS(RBKT) RBKT      &mo FN
            >;
        };

        layer_fn {
            bindings = <        
    &ht C_BRI_DN F1      &ht C_BRI_UP F2         &ht LC(UP) F3   &kp F4                     &ht C_REC F5            &kp F6                 &none                                                                                                                             &mo MOD                 &ht C_PREV F7       &ht C_PP F8             &ht C_NEXT F9                  &ht C_MUTE F10      &ht C_VOL_DN F11       &ht C_VOL_UP F12
    &kp TAB              &ht LS(Q) Q             &ht LS(W) W     &ht LS(E) E                &ht LS(R) R             &ht LS(T) T            &kp LEFT                                                                                                                          &kp UP                  &ht RS(Y) Y         &ht RS(U) U             &ht RS(I) I                    &ht RS(O) O         &ht_sq RS(P) P         &ht RS(BSLH) BSLH
    &kp ESC              &hm_pinky LCTRL A       &hm LALT S      &hm_mid LSHFT D            &hm LEFT_COMMAND F      &ht LS(G) G            &ht N4 RIGHT                 &kp LCTRL                &kp LALT         &none   &none       &kp LEFT_COMMAND        &kp RCTRL      &ht_sleep 0 DOWN        &ht RS(H) H         &ht LEFT_COMMAND J      &hm_mid RSHFT K                &hm RALT L          &hm_pinky RCTRL SEMI   &ht RS(SQT) SQT
    &kp LSHFT            &ht LG(Z) Z             &ht LG(X) X     &ht LG(C) C                &ht LG(V) V             &ht LS(B) B            &none                        &none                    &kp HOME         &none   &none       &kp PG_UP               &none          &none                   &ht RS(N) N         &ht RS(M) M             &ht_num_sub RS(COMMA) COMMA    &ht RS(DOT) DOT     &ht RS(FSLH) FSLH      &kp RSHFT
    &trans               &ht LS(GRAVE) GRAVE     &kp ENTER       &kp CAPS                   &kp DEL                                        &kp BSPC                     &hlt NUM RIGHT_COMMAND   &kp END                              &kp PG_DN               &kp ENTER      &kp SPACE                                   &kp TAB                 &none                          &ht RS(LBKT) LBKT   &ht RS(RBKT) RBKT      &trans
            >;
        };

        layer_mod {
            bindings = <        
    &none                &bt BT_SEL 0            &bt BT_SEL 1   &bt BT_SEL 2               &bt BT_SEL 3             &bt BT_SEL 4          &none                                                                                                                             &trans                  &bt BT_SEL 0        &bt BT_SEL 1            &bt BT_SEL 2                   &bt BT_SEL 3        &bt BT_SEL 4          &none
    &none                &none                   &none          &none                      &none                    &none                 &bootloader                                                                                                                       &bootloader             &none               &none                   &none                          &none               &none                 &none
    &none                &none                   &none          &none                      &none                    &none                 &rgb_ug RGB_MEFS_CMD 5       &bt BT_CLR               &none            &none   &none       &bt BT_CLR              &bt BT_CLR     &rgb_ug RGB_MEFS_CMD 5  &none               &none                   &none                          &none               &none                 &none
    &none                &none                   &none          &none                      &none                    &none                 &none                        &none                    &none            &none   &none       &none                   &none          &none                   &none               &none                   &none                          &none               &none                 &none
    &none                &none                   &none          &bl BL_INC                 &bl BL_DEC                                     &rgb_ug RGB_TOG              &bl BL_TOG               &none                                &none                   &bl BL_TOG     &rgb_ug RGB_TOG                             &bl BL_INC              &bl BL_DEC                     &none               &none                 &none
            >;
        };
    };
};
