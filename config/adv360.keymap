
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

#define DEFAULT 0
#define KOREAN 1
#define FEATURE 2
#define FN 3
#define MOD 4

/ {

     macros {
        cmd_tab: cmd_tab {
            label = "CMD_TAB";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LEFT_COMMAND>
                , <&macro_tap &kp TAB>
                , <&macro_pause_for_release>
                , <&macro_press &kp LEFT_ALT>
                , <&macro_release &kp LEFT_COMMAND &kp LEFT_ALT>;
        };
        to_korean: to_korean {
            label = "TO_KOREAN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp RIGHT_COMMAND &to KOREAN>; 
        };
        to_default: to_default {
            label = "TO_DEFAULT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp RIGHT_COMMAND &to DEFAULT>; 
        }; 
        thick_arrow: thick_arrow {
            label = "THICK_ARROW";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp EQUAL>
                , <&macro_tap &kp GT>;
        };
        thin_arrow: thin_arrow {
            label = "THIN_ARROW";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp MINUS &kp GT>;
        };
        ltgt: ltgt {
            label = "LTGT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LT &kp GT &kp LEFT>;
        };

    }; 

    combos {
        
        compatible = "zmk,combos";

        combo_n7 {
            timeout-ms = <90>; /* slower as the ring finger has less muscular power */
            key-positions = <17 43>;
            bindings = <&kp N7>;
            layers = <0 2>;
        };
        combo_n8 {
            timeout-ms = <75>;
            key-positions = <18 43>;
            bindings = <&kp N8>;
            layers = <0 2>;
        };
        combo_n9 {
            timeout-ms = <75>;
            key-positions = <19 43>;
            bindings = <&kp N9>;
            layers = <0 2>;
        };
        combo_n4 {
            timeout-ms = <90>; /* slower as the ring finger has less muscular power */
            key-positions = <30 43>;
            bindings = <&kp N4>;
            layers = <0 2>;
        };
        combo_n5 {
            timeout-ms = <75>;
            key-positions = <31 43>;
            bindings = <&kp N5>;
            layers = <0 2>;
        };
        combo_n6 {
            timeout-ms = <75>;
            key-positions = <32 43>;
            bindings = <&kp N6>;
            layers = <0 2>;
        };
        combo_n1 {
            timeout-ms = <90>; /* slower as the ring finger has less muscular power */
            key-positions = <50 43>;
            bindings = <&kp N1>;
            layers = <0 2>;
        };
        combo_n2 {
            timeout-ms = <75>;
            key-positions = <51 43>;
            bindings = <&kp N2>;
            layers = <0 2>;
        };
        combo_n3 {
            timeout-ms = <75>;
            key-positions = <52 43>;
            bindings = <&kp N3>;
            layers = <0 2>;
        };

        combo_doublequote {
            timeout-ms = <85>;
            key-positions = <31 23>;
            bindings = <&kp DQT &kp DQT &kp LEFT>;
            layers = <0 2>;
        };
        combo_quote {
            timeout-ms = <85>;
            key-positions = <32 23>;
            bindings = <&kp SQT &kp SQT &kp LEFT>;
            layers = <0 2>;
        };
        combo_underscore {
            timeout-ms = <85>;
            key-positions = <31 24>;
            bindings = <&kp UNDERSCORE>;
            layers = <0 2>;
        };
        combo_minus {
            timeout-ms = <85>;
            key-positions = <32 24>;
            bindings = <&kp MINUS>;
            layers = <0 2>;
        };
        combo_pipe {
            timeout-ms = <60>;
            key-positions = <31 25>;
            bindings = <&kp PIPE>;
            layers = <0 2>;
        };
        combo_backslash {
            timeout-ms = <60>;
            key-positions = <32 25>;
            bindings = <&kp BSLH>;
            layers = <0 2>;
        };
        combo_plus {
            timeout-ms = <75>;
            key-positions = <31 43>;
            bindings = <&kp PLUS>;
            layers = <0 2>;
        };
        combo_equal {
            timeout-ms = <75>;
            key-positions = <32 43>;
            bindings = <&kp EQUAL>;
            layers = <0 2>;
        };
        combo_brakets {
            timeout-ms = <50>;
            key-positions = <30 44>;
            bindings = <&kp LBKT &kp RBKT &kp LEFT>;
            layers = <0 2>;
        };
        combo_braces {
            timeout-ms = <60>;
            key-positions = <31 44>;
            bindings = <&kp LBRC &kp RBRC &kp LEFT>;
            layers = <0 2>;
        };
        combo_parenthesises {
            timeout-ms = <60>;
            key-positions = <32 44>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT>;
            layers = <0 2>;
        };
        combo_tilde {
            timeout-ms = <60>;
            key-positions = <31 45>;
            bindings = <&kp TILDE>;
            layers = <0 2>;
        };
        combo_grave {
            timeout-ms = <60>;
            key-positions = <32 45>;
            bindings = <&kp GRAVE>;
            layers = <0 2>;
        };
        combo_percent {
            timeout-ms = <75>;
            key-positions = <30 63>;
            bindings = <&kp PRCNT>;
            layers = <0 2>;
        };
        combo_hash {
            timeout-ms = <75>;
            key-positions = <31 63>;
            bindings = <&kp HASH>;
            layers = <0 2>;
        };
        combo_exclamation {
            timeout-ms = <75>;
            key-positions = <32 63>;
            bindings = <&kp EXCL>;
            layers = <0 2>;
        };
        combo_caret {
            timeout-ms = <75>;
            key-positions = <30 64>;
            bindings = <&kp CARET>;
            layers = <0 2>;
        };
        combo_amps {
            timeout-ms = <75>;
            key-positions = <31 64>;
            bindings = <&kp AMPS>;
            layers = <0 2>;
        };
        combo_star {
            timeout-ms = <75>;
            key-positions = <32 64>;
            bindings = <&kp STAR>;
            layers = <0 2>;
        };
        combo_dollar {
            timeout-ms = <75>;
            key-positions = <31 65>;
            bindings = <&kp DLLR>;
            layers = <0 2>;
        };
        combo_at {
            timeout-ms = <75>;
            key-positions = <32 65>;
            bindings = <&kp AT>;
            layers = <0 2>;
        };

    };

    behaviors {
        #include "macros.dtsi"

        ht: hold_tap_default {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_DEFAULT";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick_tap_ms = <145>;
            global-quick-tap;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick_tap_ms = <145>;
            global-quick-tap; 
            retro-tap;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
  
        hm_mid: homerow_mods_middle_finger {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_MIDDLE_FINGER";
            #binding-cells = <2>;
            tapping-term-ms = <150>; /* faster */
            quick_tap_ms = <110>;
            global-quick-tap;
            /* no retro-tap; */
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        hm_pinky: homerow_mods_pinky_finger {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_PINKY_FINGER";
            #binding-cells = <2>;
            tapping-term-ms = <275>; /* slower as pinky has less muscular power */
            quick_tap_ms = <175>;
            global-quick-tap;
            retro-tap;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        hlt: hold_preferred_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_PREFERRED_LT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            retro-tap;
            flavor = "hold-preferred";
            bindings = <&mo>, <&kp>;            
        };

        ht_ltgt: ht_ltgt {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_LTGT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <145>;
            flavor = "balanced";
            bindings = <&ltgt>, <&kp>;
        };

        td_sk_shft: tap_dance_sticky_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_STICKY_SHIFT";
            #binding-cells = <0>;
            tapping-term-ms = <275>;
            bindings = <&hm LEFT_COMMAND J>, <&sk RSHFT>;
        };

        ht_to_korean: hold_tap_to_korean {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_TO_KOREAN";
            #binding-cells = <2>;
            tapping-term-ms = <2000>;
            quick_tap_ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&to_korean>;            
        };

        ht_to_default: hold_tap_to_default {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_TO_DEFAULT";
            #binding-cells = <2>;
            tapping-term-ms = <2000>;
            quick_tap_ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&to_default>;            
        };

    };

    keymap {
        compatible = "zmk,keymap";

        layer_default { /* Assume it is English */
            bindings = <
   &ht PLUS EQUAL       &ht EXCL N1             &ht AT N2      &ht HASH N3                &ht DLLR N4             &ht PRCNT N5           &tog DEFAULT                                                                                                                     &mo MOD         &ht CARET N6        &ht AMPS N7             &ht STAR N8            &ht LPAR N9       &ht RPAR N0            &ht UNDERSCORE MINUS
   &kp TAB              &ht LS(Q) Q             &ht LS(W) W    &ht LS(E) E                &ht LS(R) R             &ht LS(T) T            &none                                                                                                                            &none           &ht LS(Y) Y         &ht LS(U) U             &ht LS(I) I            &ht LS(O) O       &ht LS(P) P            &ht LS(BSLH) BSLH
   &kp ESC              &hm_pinky LCTRL A       &hm LALT S     &hm_mid LSHFT D            &hm LEFT_COMMAND F      &ht LS(G) G            &kp N0                &kp SPACE                      &kp LALT         &none   &none       &kp RIGHT_COMMAND       &kp RCTRL      &none           &ht LS(H) H         &td_sk_shft             &hm_mid RSHFT K        &hm RALT L        &hm_pinky RCTRL SEMI   &hm LS(SQT) SQT
   &kp LSHFT            &ht LG(Z) Z             &ht LG(X) X    &ht LG(C) C                &ht LG(V) V             &ht LS(B) B            &none                 &none                          &kp HOME         &none   &none       &kp PG_UP               &none          &none           &ht LS(N) N         &ht LG(Z) M             &ht LG(LS(Z)) COMMA    &ht_ltgt 0 DOT    &ht LS(FSLH) FSLH      &kp RSHFT
   &mo FN               &ht LS(GRAVE) GRAVE     &kp CAPS       &ht RPAR N0                &kp DEL                                        &hlt FEATURE BSPC     &ht_to_korean RIGHT_COMMAND 0  &kp END                              &kp PG_DN               &kp ENTER      &kp SPACE                           &kp TAB                 &kp DOWN               &ht LS(LBKT) LBKT &ht LS(RBKT) RBKT      &mo FN
            >;
        };

        layer_korean { /* Assume it is Korean */
            bindings = <
   &ht PLUS EQUAL       &ht EXCL N1             &ht AT N2      &ht HASH N3                &ht DLLR N4             &ht PRCNT N5           &tog DEFAULT                                                                                                                     &mo MOD         &ht CARET N6        &ht AMPS N7             &ht STAR N8            &ht LPAR N9       &ht RPAR N0            &ht UNDERSCORE MINUS
   &kp TAB              &ht LS(Q) Q             &ht LS(W) W    &ht LS(E) E                &ht LS(R) R             &ht LS(T) T            &none                                                                                                                            &none           &ht LS(Y) Y         &ht LS(U) U             &ht LS(I) I            &ht LS(O) O       &ht LS(P) P            &ht LS(BSLH) BSLH
   &kp ESC              &hm_pinky LCTRL A       &hm LALT S     &hm_mid LSHFT D            &hm LEFT_COMMAND F      &ht LS(G) G            &kp N1                &kp SPACE                      &kp LALT         &none   &none       &kp RIGHT_COMMAND       &kp RCTRL      &none           &ht LS(H) H         &td_sk_shft             &hm_mid RSHFT K        &hm RALT L        &hm_pinky RCTRL SEMI   &hm LS(SQT) SQT
   &kp LSHFT            &ht LG(Z) Z             &ht LG(X) X    &ht LG(C) C                &ht LG(V) V             &ht LS(B) B            &none                 &none                          &kp HOME         &none   &none       &kp PG_UP               &none          &none           &ht LS(N) N         &ht LG(Z) M             &ht LG(LS(Z)) COMMA    &ht_ltgt 0 DOT    &ht LS(FSLH) FSLH      &kp RSHFT
   &mo FN               &ht LS(GRAVE) GRAVE     &kp CAPS       &ht RPAR N0                &kp DEL                                        &hlt FEATURE BSPC     &ht_to_default RIGHT_COMMAND 0 &kp END                              &kp PG_DN               &kp ENTER      &kp SPACE                           &kp TAB                 &kp DOWN               &ht LS(LBKT) LBKT &ht LS(RBKT) RBKT      &mo FN
            >;
        };

        layer_feature {
            bindings = <
   &ht PLUS EQUAL       &ht EXCL N1             &ht AT N2      &ht HASH N3                &ht DLLR N4             &ht PRCNT N5           &tog DEFAULT                                                                                                                     &mo MOD         &ht CARET N6        &ht AMPS N7             &ht STAR N8            &ht LPAR N9       &ht RPAR N0            &ht UNDERSCORE MINUS
   &kp TAB              &ht LS(Q) Q             &ht LS(W) W    &ht LS(E) E                &ht LS(R) R             &ht LS(T) T            &none                                                                                                                            &none           &kp C_VOL_UP        &kp C_BRI_DN            &kp UP                 &kp C_BRI_UP      &ht LS(P) P            &ht LS(BSLH) BSLH
   &kp ESC              &kp LCTRL               &kp LALT       &kp LSHFT                  &kp LEFT_COMMAND        &kp SPACE              &kp N2                &kp SPACE                      &kp LALT         &none   &none       &kp RIGHT_COMMAND       &kp RCTRL      &none           &kp C_VOL_DN        &kp LEFT                &kp DOWN               &kp RIGHT         &hm_pinky RCTRL SEMI   &hm LS(SQT) SQT
   &kp LSHFT            &ht LG(Z) Z             &ht LG(X) X    &kp ESC                    &cmd_tab                &kp BSPC               &none                 &none                          &kp HOME         &none   &none       &kp PG_UP               &none          &none           &ht LS(N) N         &caps_word              &thick_arrow           &thin_arrow       &ht LS(FSLH) FSLH      &kp RSHFT
   &mo FN               &ht LS(GRAVE) GRAVE     &kp CAPS       &ht RPAR N0                &kp DEL                                        &kp BSPC              &trans                         &kp END                              &kp PG_DN               &kp ENTER      &kp SPACE                           &kp TAB                 &kp DOWN               &ht LS(LBKT) LBKT &ht LS(RBKT) RBKT      &mo FN
            >;
        };

        layer_fn {
            bindings = <
 &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6   &tog DEFAULT                                            &mo MOD   &kp F7  &kp F8  &kp F9   &kp F10  &kp F11  &kp F12
 &trans  &kp F7  &kp F8  &kp F9  &kp F10  &trans  &none                                                   &none     &trans  &trans  &trans   &trans   &trans   &trans
 &trans  &kp F4  &kp F5  &kp F6  &kp F11  &trans  &kp N3  &trans  &trans   &none   &none  &trans  &trans  &none     &trans  &trans  &trans   &trans   &trans   &trans
 &trans  &kp F1  &kp F2  &kp F3  &kp F12  &trans  &none   &none   &trans   &none   &none  &trans   &none  &none     &trans  &trans  &trans   &trans   &trans   &trans
 &trans  &trans  &trans  &trans  &trans           &trans  &trans  &trans                  &trans  &trans  &trans            &trans  &trans   &trans   &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
  &none         &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4     &none                                                                                                      &trans                      &bt BT_SEL 0     &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4   &none
  &none         &none         &none         &none         &none         &none            &bootloader                                                                                                &bootloader                 &none            &none         &none         &none         &none          &none
  &none         &none         &none         &none         &none         &none            &rgb_ug RGB_MEFS_CMD 5  &bt BT_CLR   &none   &none         &none       &bt BT_CLR      &bt BT_CLR          &rgb_ug RGB_MEFS_CMD 5      &none            &none         &none         &none         &none          &none
  &none         &none         &none         &none         &none         &none            &none                   &none        &none   &none         &none       &none           &none               &none                       &none            &none         &none         &none         &none          &none
  &none         &none         &none         &bl BL_INC    &bl BL_DEC                     &rgb_ug RGB_TOG         &bl BL_TOG   &none                             &none           &bl BL_TOG          &rgb_ug RGB_TOG                              &bl BL_INC    &bl BL_DEC    &none         &none          &none
            >;
        };
    };
};
